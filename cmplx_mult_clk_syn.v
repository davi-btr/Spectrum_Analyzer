// megafunction wizard: %ALTMULT_COMPLEX%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: altmult_complex 

// ============================================================
// File Name: cmplx_mult_clk.v
// Megafunction Name(s):
// 			altmult_complex
//
// Simulation Library Files(s):
// 			altera_mf
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 13.0.1 Build 232 06/12/2013 SP 1 SJ Web Edition
// ************************************************************


//Copyright (C) 1991-2013 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//altmult_complex DEVICE_FAMILY="Cyclone II" IMPLEMENTATION_STYLE="AUTO" PIPELINE=1 REPRESENTATION_A="SIGNED" REPRESENTATION_B="SIGNED" WIDTH_A=32 WIDTH_B=32 WIDTH_RESULT=64 clock dataa_imag dataa_real datab_imag datab_real result_imag result_real
//VERSION_BEGIN 13.0 cbx_alt_ded_mult_y 2013:06:12:18:03:43:SJ cbx_altera_mult_add 2013:06:12:18:03:43:SJ cbx_altera_mult_add_rtl 2013:06:12:18:03:43:SJ cbx_altmult_add 2013:06:12:18:03:43:SJ cbx_altmult_complex 2013:06:12:18:03:43:SJ cbx_arriav 2013:06:12:18:03:43:SJ cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_lpm_compare 2013:06:12:18:03:43:SJ cbx_lpm_mult 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_padd 2013:06:12:18:03:43:SJ cbx_parallel_add 2013:06:12:18:03:43:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_stratixv 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//altmult_add DEVICE_FAMILY="Cyclone II" INPUT_REGISTER_A0="UNREGISTERED" INPUT_REGISTER_A1="UNREGISTERED" INPUT_REGISTER_B0="UNREGISTERED" INPUT_REGISTER_B1="UNREGISTERED" MULTIPLIER1_DIRECTION="SUB" MULTIPLIER_REGISTER0="UNREGISTERED" MULTIPLIER_REGISTER1="UNREGISTERED" NUMBER_OF_MULTIPLIERS=2 OUTPUT_ACLR="ACLR0" OUTPUT_REGISTER="CLOCK0" port_addnsub1="PORT_UNUSED" port_signa="PORT_UNUSED" port_signb="PORT_UNUSED" REPRESENTATION_A="SIGNED" REPRESENTATION_B="SIGNED" WIDTH_A=32 WIDTH_B=32 WIDTH_RESULT=64 aclr0 clock0 dataa datab ena0 result
//VERSION_BEGIN 13.0 cbx_alt_ded_mult_y 2013:06:12:18:03:43:SJ cbx_altera_mult_add 2013:06:12:18:03:43:SJ cbx_altera_mult_add_rtl 2013:06:12:18:03:43:SJ cbx_altmult_add 2013:06:12:18:03:43:SJ cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_lpm_mult 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_padd 2013:06:12:18:03:43:SJ cbx_parallel_add 2013:06:12:18:03:43:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END


//adder DEVICE_FAMILY="Cyclone II" WIDTH=65 dataa datab result
//VERSION_BEGIN 13.0 cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END


//adder DEVICE_FAMILY="Cyclone II" WIDTH=66 dataa datab result
//VERSION_BEGIN 13.0 cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END


//alt_ded_mult_y device_family="Cyclone II" input_reg_a="UNREGISTERED" input_reg_b="UNREGISTERED" output_reg="UNREGISTERED" pipeline_reg="UNREGISTERED" representation_a="SIGNED" representation_b="SIGNED" sub_dedicated_multiplier_circuitry="YES" width_a=32 width_b=32 dataa datab result
//VERSION_BEGIN 13.0 cbx_alt_ded_mult_y 2013:06:12:18:03:43:SJ cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_padd 2013:06:12:18:03:43:SJ cbx_parallel_add 2013:06:12:18:03:43:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END


//alt_ded_mult_y device_family="Cyclone II" external_stage_counter=5 input_aclr_a="ACLR0" input_aclr_b="ACLR0" input_reg_a="UNREGISTERED" input_reg_b="UNREGISTERED" level=1 output_reg="UNREGISTERED" pipeline=0 pipeline_clear="ACLR0" pipeline_reg="UNREGISTERED" representation_a="SIGNED" representation_b="SIGNED" sub_dedicated_multiplier_circuitry="YES" width_a=14 width_b=32 dataa datab result
//VERSION_BEGIN 13.0 cbx_alt_ded_mult_y 2013:06:12:18:03:43:SJ cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_padd 2013:06:12:18:03:43:SJ cbx_parallel_add 2013:06:12:18:03:43:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END


//alt_ded_mult_y device_family="Cyclone II" external_stage_counter=5 input_aclr_a="ACLR0" input_aclr_b="ACLR0" input_reg_a="UNREGISTERED" input_reg_b="UNREGISTERED" level=2 output_reg="UNREGISTERED" pipeline=0 pipeline_clear="ACLR0" pipeline_reg="UNREGISTERED" representation_a="SIGNED" representation_b="SIGNED" sub_dedicated_multiplier_circuitry="YES" width_a=14 width_b=14 dataa datab result
//VERSION_BEGIN 13.0 cbx_alt_ded_mult_y 2013:06:12:18:03:43:SJ cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_padd 2013:06:12:18:03:43:SJ cbx_parallel_add 2013:06:12:18:03:43:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END


//dffpipe DELAY=0 WIDTH=28 d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 13.0 cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF"} *)
module  cmplx_mult_clk_dffpipe
	( 
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [27:0]  d;
	output   [27:0]  q;


	assign
		q = d;
endmodule //cmplx_mult_clk_dffpipe

//synthesis_resources = dsp_9bit 2 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  cmplx_mult_clk_ded_mult12
	( 
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   [13:0]  dataa;
	input   [13:0]  datab;
	output   [27:0]  result;

	wire  [27:0]   wire_mac_mult8_dataout;
	wire  [27:0]   wire_mac_out9_dataout;
	wire  [27:0]   wire_pre_result_q;
	wire  [13:0]  x_dataa;
	wire  [13:0]  x_datab;
	wire  [0:0]  x_signa;
	wire  [0:0]  x_signb;

	cycloneii_mac_mult   mac_mult8
	( 
	.dataa({x_dataa}),
	.datab({x_datab}),
	.dataout(wire_mac_mult8_dataout),
	.signa(x_signa),
	.signb(x_signb)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult8.dataa_width = 14,
		mac_mult8.datab_width = 14,
		mac_mult8.lpm_type = "cycloneii_mac_mult";
	cycloneii_mac_out   mac_out9
	( 
	.dataa({wire_mac_mult8_dataout[27:0]}),
	.dataout(wire_mac_out9_dataout)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out9.dataa_width = 28,
		mac_out9.lpm_type = "cycloneii_mac_out";
	cmplx_mult_clk_dffpipe   pre_result
	( 
	.d(wire_mac_out9_dataout[27:0]),
	.q(wire_pre_result_q));
	assign
		result = wire_pre_result_q,
		x_dataa = dataa,
		x_datab = datab,
		x_signa = 1'b1,
		x_signb = 1'b1;
endmodule //cmplx_mult_clk_ded_mult12


//alt_ded_mult_y device_family="Cyclone II" external_stage_counter=5 input_aclr_a="ACLR0" input_aclr_b="ACLR0" input_reg_a="UNREGISTERED" input_reg_b="UNREGISTERED" level=2 output_reg="UNREGISTERED" pipeline=0 pipeline_clear="ACLR0" pipeline_reg="UNREGISTERED" representation_a="SIGNED" representation_b="UNSIGNED" sub_dedicated_multiplier_circuitry="YES" width_a=14 width_b=18 dataa datab result
//VERSION_BEGIN 13.0 cbx_alt_ded_mult_y 2013:06:12:18:03:43:SJ cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_padd 2013:06:12:18:03:43:SJ cbx_parallel_add 2013:06:12:18:03:43:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END


//dffpipe DELAY=0 WIDTH=32 d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 13.0 cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF"} *)
module  cmplx_mult_clk_dffpipe1
	( 
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [31:0]  d;
	output   [31:0]  q;


	assign
		q = d;
endmodule //cmplx_mult_clk_dffpipe1

//synthesis_resources = dsp_9bit 2 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  cmplx_mult_clk_ded_mult123
	( 
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   [13:0]  dataa;
	input   [17:0]  datab;
	output   [31:0]  result;

	wire  [31:0]   wire_mac_mult10_dataout;
	wire  [31:0]   wire_mac_out11_dataout;
	wire  [31:0]   wire_pre_result_q;
	wire  [13:0]  x_dataa;
	wire  [17:0]  x_datab;
	wire  [0:0]  x_signa;
	wire  [0:0]  x_signb;

	cycloneii_mac_mult   mac_mult10
	( 
	.dataa({x_dataa}),
	.datab({x_datab}),
	.dataout(wire_mac_mult10_dataout),
	.signa(x_signa),
	.signb(x_signb)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult10.dataa_width = 14,
		mac_mult10.datab_width = 18,
		mac_mult10.lpm_type = "cycloneii_mac_mult";
	cycloneii_mac_out   mac_out11
	( 
	.dataa({wire_mac_mult10_dataout[31:0]}),
	.dataout(wire_mac_out11_dataout)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out11.dataa_width = 32,
		mac_out11.lpm_type = "cycloneii_mac_out";
	cmplx_mult_clk_dffpipe1   pre_result
	( 
	.d(wire_mac_out11_dataout[31:0]),
	.q(wire_pre_result_q));
	assign
		result = wire_pre_result_q,
		x_dataa = dataa,
		x_datab = datab,
		x_signa = 1'b1,
		x_signb = 1'b0;
endmodule //cmplx_mult_clk_ded_mult123


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="ADD" LPM_WIDTH=28 dataa datab result
//VERSION_BEGIN 13.0 cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ  VERSION_END

//synthesis_resources = dsp_9bit 4 lut 28 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  cmplx_mult_clk_ded_mult1
	( 
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   [13:0]  dataa;
	input   [31:0]  datab;
	output   [45:0]  result;

	wire  [27:0]   wire_left_mult_result;
	wire  [31:0]   wire_right_mult_result;
	wire	[27:0]	wire_substage_adder_dataa;
	wire	[27:0]	wire_substage_adder_datab;
	wire	[27:0]	wire_substage_adder_result;
	wire  [13:0]  extension_bits;

	cmplx_mult_clk_ded_mult12   left_mult
	( 
	.dataa(dataa),
	.datab(datab[31:18]),
	.result(wire_left_mult_result));
	cmplx_mult_clk_ded_mult123   right_mult
	( 
	.dataa(dataa),
	.datab(datab[17:0]),
	.result(wire_right_mult_result));
	assign
		wire_substage_adder_result = wire_substage_adder_dataa + wire_substage_adder_datab;
	assign
		wire_substage_adder_dataa = wire_left_mult_result,
		wire_substage_adder_datab = {{extension_bits, wire_right_mult_result[31:18]}};
	assign
		extension_bits = {14{wire_right_mult_result[31]}},
		result = {wire_substage_adder_result, wire_right_mult_result[17:0]};
endmodule //cmplx_mult_clk_ded_mult1


//alt_ded_mult_y device_family="Cyclone II" external_stage_counter=5 input_aclr_a="ACLR0" input_aclr_b="ACLR0" input_reg_a="UNREGISTERED" input_reg_b="UNREGISTERED" level=1 output_reg="UNREGISTERED" pipeline=0 pipeline_clear="ACLR0" pipeline_reg="UNREGISTERED" representation_a="UNSIGNED" representation_b="SIGNED" sub_dedicated_multiplier_circuitry="YES" width_a=18 width_b=32 dataa datab result
//VERSION_BEGIN 13.0 cbx_alt_ded_mult_y 2013:06:12:18:03:43:SJ cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_padd 2013:06:12:18:03:43:SJ cbx_parallel_add 2013:06:12:18:03:43:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END


//alt_ded_mult_y device_family="Cyclone II" external_stage_counter=5 input_aclr_a="ACLR0" input_aclr_b="ACLR0" input_reg_a="UNREGISTERED" input_reg_b="UNREGISTERED" level=2 output_reg="UNREGISTERED" pipeline=0 pipeline_clear="ACLR0" pipeline_reg="UNREGISTERED" representation_a="UNSIGNED" representation_b="SIGNED" sub_dedicated_multiplier_circuitry="YES" width_a=18 width_b=14 dataa datab result
//VERSION_BEGIN 13.0 cbx_alt_ded_mult_y 2013:06:12:18:03:43:SJ cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_padd 2013:06:12:18:03:43:SJ cbx_parallel_add 2013:06:12:18:03:43:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END

//synthesis_resources = dsp_9bit 2 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  cmplx_mult_clk_ded_mult12345
	( 
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   [17:0]  dataa;
	input   [13:0]  datab;
	output   [31:0]  result;

	wire  [31:0]   wire_mac_mult12_dataout;
	wire  [31:0]   wire_mac_out13_dataout;
	wire  [31:0]   wire_pre_result_q;
	wire  [17:0]  x_dataa;
	wire  [13:0]  x_datab;
	wire  [0:0]  x_signa;
	wire  [0:0]  x_signb;

	cycloneii_mac_mult   mac_mult12
	( 
	.dataa({x_dataa}),
	.datab({x_datab}),
	.dataout(wire_mac_mult12_dataout),
	.signa(x_signa),
	.signb(x_signb)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult12.dataa_width = 18,
		mac_mult12.datab_width = 14,
		mac_mult12.lpm_type = "cycloneii_mac_mult";
	cycloneii_mac_out   mac_out13
	( 
	.dataa({wire_mac_mult12_dataout[31:0]}),
	.dataout(wire_mac_out13_dataout)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out13.dataa_width = 32,
		mac_out13.lpm_type = "cycloneii_mac_out";
	cmplx_mult_clk_dffpipe1   pre_result
	( 
	.d(wire_mac_out13_dataout[31:0]),
	.q(wire_pre_result_q));
	assign
		result = wire_pre_result_q,
		x_dataa = dataa,
		x_datab = datab,
		x_signa = 1'b0,
		x_signb = 1'b1;
endmodule //cmplx_mult_clk_ded_mult12345


//alt_ded_mult_y device_family="Cyclone II" external_stage_counter=5 input_aclr_a="ACLR0" input_aclr_b="ACLR0" input_reg_a="UNREGISTERED" input_reg_b="UNREGISTERED" level=2 output_reg="UNREGISTERED" pipeline=0 pipeline_clear="ACLR0" pipeline_reg="UNREGISTERED" representation_a="UNSIGNED" representation_b="UNSIGNED" sub_dedicated_multiplier_circuitry="YES" width_a=18 width_b=18 dataa datab result
//VERSION_BEGIN 13.0 cbx_alt_ded_mult_y 2013:06:12:18:03:43:SJ cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_padd 2013:06:12:18:03:43:SJ cbx_parallel_add 2013:06:12:18:03:43:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END


//dffpipe DELAY=0 WIDTH=36 d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 13.0 cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF"} *)
module  cmplx_mult_clk_dffpipe12
	( 
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [35:0]  d;
	output   [35:0]  q;


	assign
		q = d;
endmodule //cmplx_mult_clk_dffpipe12

//synthesis_resources = dsp_9bit 2 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  cmplx_mult_clk_ded_mult123456
	( 
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   [17:0]  dataa;
	input   [17:0]  datab;
	output   [35:0]  result;

	wire  [35:0]   wire_mac_mult14_dataout;
	wire  [35:0]   wire_mac_out15_dataout;
	wire  [35:0]   wire_pre_result_q;
	wire  [17:0]  x_dataa;
	wire  [17:0]  x_datab;
	wire  [0:0]  x_signa;
	wire  [0:0]  x_signb;

	cycloneii_mac_mult   mac_mult14
	( 
	.dataa({x_dataa}),
	.datab({x_datab}),
	.dataout(wire_mac_mult14_dataout),
	.signa(x_signa),
	.signb(x_signb)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult14.dataa_width = 18,
		mac_mult14.datab_width = 18,
		mac_mult14.lpm_type = "cycloneii_mac_mult";
	cycloneii_mac_out   mac_out15
	( 
	.dataa({wire_mac_mult14_dataout[35:0]}),
	.dataout(wire_mac_out15_dataout)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out15.dataa_width = 36,
		mac_out15.lpm_type = "cycloneii_mac_out";
	cmplx_mult_clk_dffpipe12   pre_result
	( 
	.d(wire_mac_out15_dataout[35:0]),
	.q(wire_pre_result_q));
	assign
		result = wire_pre_result_q,
		x_dataa = dataa,
		x_datab = datab,
		x_signa = 1'b0,
		x_signb = 1'b0;
endmodule //cmplx_mult_clk_ded_mult123456


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="ADD" LPM_WIDTH=32 dataa datab result
//VERSION_BEGIN 13.0 cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ  VERSION_END

//synthesis_resources = dsp_9bit 4 lut 32 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  cmplx_mult_clk_ded_mult1234
	( 
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   [17:0]  dataa;
	input   [31:0]  datab;
	output   [49:0]  result;

	wire  [31:0]   wire_left_mult_result;
	wire  [35:0]   wire_right_mult_result;
	wire	[31:0]	wire_substage_adder_dataa;
	wire	[31:0]	wire_substage_adder_datab;
	wire	[31:0]	wire_substage_adder_result;
	wire  [13:0]  extension_bits;

	cmplx_mult_clk_ded_mult12345   left_mult
	( 
	.dataa(dataa),
	.datab(datab[31:18]),
	.result(wire_left_mult_result));
	cmplx_mult_clk_ded_mult123456   right_mult
	( 
	.dataa(dataa),
	.datab(datab[17:0]),
	.result(wire_right_mult_result));
	assign
		wire_substage_adder_result = wire_substage_adder_dataa + wire_substage_adder_datab;
	assign
		wire_substage_adder_dataa = wire_left_mult_result,
		wire_substage_adder_datab = {{extension_bits, wire_right_mult_result[35:18]}};
	assign
		extension_bits = {14{1'b0}},
		result = {wire_substage_adder_result, wire_right_mult_result[17:0]};
endmodule //cmplx_mult_clk_ded_mult1234


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="ADD" LPM_WIDTH=46 dataa datab result
//VERSION_BEGIN 13.0 cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ  VERSION_END

//synthesis_resources = dsp_9bit 8 lut 106 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  cmplx_mult_clk_ded_mult
	( 
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   [31:0]  dataa;
	input   [31:0]  datab;
	output   [63:0]  result;

	wire  [45:0]   wire_left_mult_result;
	wire  [49:0]   wire_right_mult_result;
	wire	[45:0]	wire_substage_adder_dataa;
	wire	[45:0]	wire_substage_adder_datab;
	wire	[45:0]	wire_substage_adder_result;
	wire  [13:0]  extension_bits;

	cmplx_mult_clk_ded_mult1   left_mult
	( 
	.dataa(dataa[31:18]),
	.datab(datab),
	.result(wire_left_mult_result));
	cmplx_mult_clk_ded_mult1234   right_mult
	( 
	.dataa(dataa[17:0]),
	.datab(datab),
	.result(wire_right_mult_result));
	assign
		wire_substage_adder_result = wire_substage_adder_dataa + wire_substage_adder_datab;
	assign
		wire_substage_adder_dataa = wire_left_mult_result,
		wire_substage_adder_datab = {{extension_bits, wire_right_mult_result[49:18]}};
	assign
		extension_bits = {14{wire_right_mult_result[49]}},
		result = {wire_substage_adder_result, wire_right_mult_result[17:0]};
endmodule //cmplx_mult_clk_ded_mult

//synthesis_resources = dsp_9bit 16 lut 343 reg 66 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  cmplx_mult_clk_mult_add
	( 
	aclr0,
	clock0,
	dataa,
	datab,
	ena0,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr0;
	input   clock0;
	input   [63:0]  dataa;
	input   [63:0]  datab;
	input   ena0;
	output   [63:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr0;
	tri1   clock0;
	tri0   [63:0]  dataa;
	tri0   [63:0]  datab;
	tri1   ena0;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	[64:0]	wire_add3_result;
	wire	[65:0]	wire_add5_result;
	wire  [63:0]   wire_ded_mult1_result;
	wire  [63:0]   wire_ded_mult2_result;
	(* ALTERA_ATTRIBUTE = {"MAX_FANOUT=5"} *)
	reg	[65:0]	dffe7a;
	wire  [64:0]   wire_sft4a_in;
	wire  [65:0]   wire_sft6a_in;
	wire  [65:0]   wire_sft6a_out;
	wire  [63:0]  dataa_bus;
	wire  [63:0]  datab_bus;
	wire  w305w;
	wire  [64:0]  w_input306w;
	wire  [64:0]  w_input311w;
	wire  [65:0]  w_input317w;
	wire  [65:0]  w_input323w;
	wire  [63:0]  w_neg_out298w;

	assign
		wire_add3_result = w_input306w + w_input311w;
	assign
		wire_add5_result = w_input317w + w_input323w;
	cmplx_mult_clk_ded_mult   ded_mult1
	( 
	.dataa({dataa_bus[31:0]}),
	.datab({datab_bus[31:0]}),
	.result(wire_ded_mult1_result));
	cmplx_mult_clk_ded_mult   ded_mult2
	( 
	.dataa({dataa_bus[63:32]}),
	.datab({datab_bus[63:32]}),
	.result(wire_ded_mult2_result));
	// synopsys translate_off
	initial
		dffe7a = 0;
	// synopsys translate_on
	always @ ( posedge clock0 or  posedge aclr0)
		if (aclr0 == 1'b1) dffe7a <= 66'b0;
		else if  (ena0 == 1'b1)   dffe7a <= wire_sft6a_out;
	soft   sft4a_0
	( 
	.in(wire_sft4a_in[0:0]),
	.out());
	soft   sft4a_1
	( 
	.in(wire_sft4a_in[1:1]),
	.out());
	soft   sft4a_2
	( 
	.in(wire_sft4a_in[2:2]),
	.out());
	soft   sft4a_3
	( 
	.in(wire_sft4a_in[3:3]),
	.out());
	soft   sft4a_4
	( 
	.in(wire_sft4a_in[4:4]),
	.out());
	soft   sft4a_5
	( 
	.in(wire_sft4a_in[5:5]),
	.out());
	soft   sft4a_6
	( 
	.in(wire_sft4a_in[6:6]),
	.out());
	soft   sft4a_7
	( 
	.in(wire_sft4a_in[7:7]),
	.out());
	soft   sft4a_8
	( 
	.in(wire_sft4a_in[8:8]),
	.out());
	soft   sft4a_9
	( 
	.in(wire_sft4a_in[9:9]),
	.out());
	soft   sft4a_10
	( 
	.in(wire_sft4a_in[10:10]),
	.out());
	soft   sft4a_11
	( 
	.in(wire_sft4a_in[11:11]),
	.out());
	soft   sft4a_12
	( 
	.in(wire_sft4a_in[12:12]),
	.out());
	soft   sft4a_13
	( 
	.in(wire_sft4a_in[13:13]),
	.out());
	soft   sft4a_14
	( 
	.in(wire_sft4a_in[14:14]),
	.out());
	soft   sft4a_15
	( 
	.in(wire_sft4a_in[15:15]),
	.out());
	soft   sft4a_16
	( 
	.in(wire_sft4a_in[16:16]),
	.out());
	soft   sft4a_17
	( 
	.in(wire_sft4a_in[17:17]),
	.out());
	soft   sft4a_18
	( 
	.in(wire_sft4a_in[18:18]),
	.out());
	soft   sft4a_19
	( 
	.in(wire_sft4a_in[19:19]),
	.out());
	soft   sft4a_20
	( 
	.in(wire_sft4a_in[20:20]),
	.out());
	soft   sft4a_21
	( 
	.in(wire_sft4a_in[21:21]),
	.out());
	soft   sft4a_22
	( 
	.in(wire_sft4a_in[22:22]),
	.out());
	soft   sft4a_23
	( 
	.in(wire_sft4a_in[23:23]),
	.out());
	soft   sft4a_24
	( 
	.in(wire_sft4a_in[24:24]),
	.out());
	soft   sft4a_25
	( 
	.in(wire_sft4a_in[25:25]),
	.out());
	soft   sft4a_26
	( 
	.in(wire_sft4a_in[26:26]),
	.out());
	soft   sft4a_27
	( 
	.in(wire_sft4a_in[27:27]),
	.out());
	soft   sft4a_28
	( 
	.in(wire_sft4a_in[28:28]),
	.out());
	soft   sft4a_29
	( 
	.in(wire_sft4a_in[29:29]),
	.out());
	soft   sft4a_30
	( 
	.in(wire_sft4a_in[30:30]),
	.out());
	soft   sft4a_31
	( 
	.in(wire_sft4a_in[31:31]),
	.out());
	soft   sft4a_32
	( 
	.in(wire_sft4a_in[32:32]),
	.out());
	soft   sft4a_33
	( 
	.in(wire_sft4a_in[33:33]),
	.out());
	soft   sft4a_34
	( 
	.in(wire_sft4a_in[34:34]),
	.out());
	soft   sft4a_35
	( 
	.in(wire_sft4a_in[35:35]),
	.out());
	soft   sft4a_36
	( 
	.in(wire_sft4a_in[36:36]),
	.out());
	soft   sft4a_37
	( 
	.in(wire_sft4a_in[37:37]),
	.out());
	soft   sft4a_38
	( 
	.in(wire_sft4a_in[38:38]),
	.out());
	soft   sft4a_39
	( 
	.in(wire_sft4a_in[39:39]),
	.out());
	soft   sft4a_40
	( 
	.in(wire_sft4a_in[40:40]),
	.out());
	soft   sft4a_41
	( 
	.in(wire_sft4a_in[41:41]),
	.out());
	soft   sft4a_42
	( 
	.in(wire_sft4a_in[42:42]),
	.out());
	soft   sft4a_43
	( 
	.in(wire_sft4a_in[43:43]),
	.out());
	soft   sft4a_44
	( 
	.in(wire_sft4a_in[44:44]),
	.out());
	soft   sft4a_45
	( 
	.in(wire_sft4a_in[45:45]),
	.out());
	soft   sft4a_46
	( 
	.in(wire_sft4a_in[46:46]),
	.out());
	soft   sft4a_47
	( 
	.in(wire_sft4a_in[47:47]),
	.out());
	soft   sft4a_48
	( 
	.in(wire_sft4a_in[48:48]),
	.out());
	soft   sft4a_49
	( 
	.in(wire_sft4a_in[49:49]),
	.out());
	soft   sft4a_50
	( 
	.in(wire_sft4a_in[50:50]),
	.out());
	soft   sft4a_51
	( 
	.in(wire_sft4a_in[51:51]),
	.out());
	soft   sft4a_52
	( 
	.in(wire_sft4a_in[52:52]),
	.out());
	soft   sft4a_53
	( 
	.in(wire_sft4a_in[53:53]),
	.out());
	soft   sft4a_54
	( 
	.in(wire_sft4a_in[54:54]),
	.out());
	soft   sft4a_55
	( 
	.in(wire_sft4a_in[55:55]),
	.out());
	soft   sft4a_56
	( 
	.in(wire_sft4a_in[56:56]),
	.out());
	soft   sft4a_57
	( 
	.in(wire_sft4a_in[57:57]),
	.out());
	soft   sft4a_58
	( 
	.in(wire_sft4a_in[58:58]),
	.out());
	soft   sft4a_59
	( 
	.in(wire_sft4a_in[59:59]),
	.out());
	soft   sft4a_60
	( 
	.in(wire_sft4a_in[60:60]),
	.out());
	soft   sft4a_61
	( 
	.in(wire_sft4a_in[61:61]),
	.out());
	soft   sft4a_62
	( 
	.in(wire_sft4a_in[62:62]),
	.out());
	soft   sft4a_63
	( 
	.in(wire_sft4a_in[63:63]),
	.out());
	soft   sft4a_64
	( 
	.in(wire_sft4a_in[64:64]),
	.out());
	assign
		wire_sft4a_in = wire_add3_result;
	soft   sft6a_0
	( 
	.in(wire_sft6a_in[0:0]),
	.out(wire_sft6a_out[0:0]));
	soft   sft6a_1
	( 
	.in(wire_sft6a_in[1:1]),
	.out(wire_sft6a_out[1:1]));
	soft   sft6a_2
	( 
	.in(wire_sft6a_in[2:2]),
	.out(wire_sft6a_out[2:2]));
	soft   sft6a_3
	( 
	.in(wire_sft6a_in[3:3]),
	.out(wire_sft6a_out[3:3]));
	soft   sft6a_4
	( 
	.in(wire_sft6a_in[4:4]),
	.out(wire_sft6a_out[4:4]));
	soft   sft6a_5
	( 
	.in(wire_sft6a_in[5:5]),
	.out(wire_sft6a_out[5:5]));
	soft   sft6a_6
	( 
	.in(wire_sft6a_in[6:6]),
	.out(wire_sft6a_out[6:6]));
	soft   sft6a_7
	( 
	.in(wire_sft6a_in[7:7]),
	.out(wire_sft6a_out[7:7]));
	soft   sft6a_8
	( 
	.in(wire_sft6a_in[8:8]),
	.out(wire_sft6a_out[8:8]));
	soft   sft6a_9
	( 
	.in(wire_sft6a_in[9:9]),
	.out(wire_sft6a_out[9:9]));
	soft   sft6a_10
	( 
	.in(wire_sft6a_in[10:10]),
	.out(wire_sft6a_out[10:10]));
	soft   sft6a_11
	( 
	.in(wire_sft6a_in[11:11]),
	.out(wire_sft6a_out[11:11]));
	soft   sft6a_12
	( 
	.in(wire_sft6a_in[12:12]),
	.out(wire_sft6a_out[12:12]));
	soft   sft6a_13
	( 
	.in(wire_sft6a_in[13:13]),
	.out(wire_sft6a_out[13:13]));
	soft   sft6a_14
	( 
	.in(wire_sft6a_in[14:14]),
	.out(wire_sft6a_out[14:14]));
	soft   sft6a_15
	( 
	.in(wire_sft6a_in[15:15]),
	.out(wire_sft6a_out[15:15]));
	soft   sft6a_16
	( 
	.in(wire_sft6a_in[16:16]),
	.out(wire_sft6a_out[16:16]));
	soft   sft6a_17
	( 
	.in(wire_sft6a_in[17:17]),
	.out(wire_sft6a_out[17:17]));
	soft   sft6a_18
	( 
	.in(wire_sft6a_in[18:18]),
	.out(wire_sft6a_out[18:18]));
	soft   sft6a_19
	( 
	.in(wire_sft6a_in[19:19]),
	.out(wire_sft6a_out[19:19]));
	soft   sft6a_20
	( 
	.in(wire_sft6a_in[20:20]),
	.out(wire_sft6a_out[20:20]));
	soft   sft6a_21
	( 
	.in(wire_sft6a_in[21:21]),
	.out(wire_sft6a_out[21:21]));
	soft   sft6a_22
	( 
	.in(wire_sft6a_in[22:22]),
	.out(wire_sft6a_out[22:22]));
	soft   sft6a_23
	( 
	.in(wire_sft6a_in[23:23]),
	.out(wire_sft6a_out[23:23]));
	soft   sft6a_24
	( 
	.in(wire_sft6a_in[24:24]),
	.out(wire_sft6a_out[24:24]));
	soft   sft6a_25
	( 
	.in(wire_sft6a_in[25:25]),
	.out(wire_sft6a_out[25:25]));
	soft   sft6a_26
	( 
	.in(wire_sft6a_in[26:26]),
	.out(wire_sft6a_out[26:26]));
	soft   sft6a_27
	( 
	.in(wire_sft6a_in[27:27]),
	.out(wire_sft6a_out[27:27]));
	soft   sft6a_28
	( 
	.in(wire_sft6a_in[28:28]),
	.out(wire_sft6a_out[28:28]));
	soft   sft6a_29
	( 
	.in(wire_sft6a_in[29:29]),
	.out(wire_sft6a_out[29:29]));
	soft   sft6a_30
	( 
	.in(wire_sft6a_in[30:30]),
	.out(wire_sft6a_out[30:30]));
	soft   sft6a_31
	( 
	.in(wire_sft6a_in[31:31]),
	.out(wire_sft6a_out[31:31]));
	soft   sft6a_32
	( 
	.in(wire_sft6a_in[32:32]),
	.out(wire_sft6a_out[32:32]));
	soft   sft6a_33
	( 
	.in(wire_sft6a_in[33:33]),
	.out(wire_sft6a_out[33:33]));
	soft   sft6a_34
	( 
	.in(wire_sft6a_in[34:34]),
	.out(wire_sft6a_out[34:34]));
	soft   sft6a_35
	( 
	.in(wire_sft6a_in[35:35]),
	.out(wire_sft6a_out[35:35]));
	soft   sft6a_36
	( 
	.in(wire_sft6a_in[36:36]),
	.out(wire_sft6a_out[36:36]));
	soft   sft6a_37
	( 
	.in(wire_sft6a_in[37:37]),
	.out(wire_sft6a_out[37:37]));
	soft   sft6a_38
	( 
	.in(wire_sft6a_in[38:38]),
	.out(wire_sft6a_out[38:38]));
	soft   sft6a_39
	( 
	.in(wire_sft6a_in[39:39]),
	.out(wire_sft6a_out[39:39]));
	soft   sft6a_40
	( 
	.in(wire_sft6a_in[40:40]),
	.out(wire_sft6a_out[40:40]));
	soft   sft6a_41
	( 
	.in(wire_sft6a_in[41:41]),
	.out(wire_sft6a_out[41:41]));
	soft   sft6a_42
	( 
	.in(wire_sft6a_in[42:42]),
	.out(wire_sft6a_out[42:42]));
	soft   sft6a_43
	( 
	.in(wire_sft6a_in[43:43]),
	.out(wire_sft6a_out[43:43]));
	soft   sft6a_44
	( 
	.in(wire_sft6a_in[44:44]),
	.out(wire_sft6a_out[44:44]));
	soft   sft6a_45
	( 
	.in(wire_sft6a_in[45:45]),
	.out(wire_sft6a_out[45:45]));
	soft   sft6a_46
	( 
	.in(wire_sft6a_in[46:46]),
	.out(wire_sft6a_out[46:46]));
	soft   sft6a_47
	( 
	.in(wire_sft6a_in[47:47]),
	.out(wire_sft6a_out[47:47]));
	soft   sft6a_48
	( 
	.in(wire_sft6a_in[48:48]),
	.out(wire_sft6a_out[48:48]));
	soft   sft6a_49
	( 
	.in(wire_sft6a_in[49:49]),
	.out(wire_sft6a_out[49:49]));
	soft   sft6a_50
	( 
	.in(wire_sft6a_in[50:50]),
	.out(wire_sft6a_out[50:50]));
	soft   sft6a_51
	( 
	.in(wire_sft6a_in[51:51]),
	.out(wire_sft6a_out[51:51]));
	soft   sft6a_52
	( 
	.in(wire_sft6a_in[52:52]),
	.out(wire_sft6a_out[52:52]));
	soft   sft6a_53
	( 
	.in(wire_sft6a_in[53:53]),
	.out(wire_sft6a_out[53:53]));
	soft   sft6a_54
	( 
	.in(wire_sft6a_in[54:54]),
	.out(wire_sft6a_out[54:54]));
	soft   sft6a_55
	( 
	.in(wire_sft6a_in[55:55]),
	.out(wire_sft6a_out[55:55]));
	soft   sft6a_56
	( 
	.in(wire_sft6a_in[56:56]),
	.out(wire_sft6a_out[56:56]));
	soft   sft6a_57
	( 
	.in(wire_sft6a_in[57:57]),
	.out(wire_sft6a_out[57:57]));
	soft   sft6a_58
	( 
	.in(wire_sft6a_in[58:58]),
	.out(wire_sft6a_out[58:58]));
	soft   sft6a_59
	( 
	.in(wire_sft6a_in[59:59]),
	.out(wire_sft6a_out[59:59]));
	soft   sft6a_60
	( 
	.in(wire_sft6a_in[60:60]),
	.out(wire_sft6a_out[60:60]));
	soft   sft6a_61
	( 
	.in(wire_sft6a_in[61:61]),
	.out(wire_sft6a_out[61:61]));
	soft   sft6a_62
	( 
	.in(wire_sft6a_in[62:62]),
	.out(wire_sft6a_out[62:62]));
	soft   sft6a_63
	( 
	.in(wire_sft6a_in[63:63]),
	.out(wire_sft6a_out[63:63]));
	soft   sft6a_64
	( 
	.in(wire_sft6a_in[64:64]),
	.out(wire_sft6a_out[64:64]));
	soft   sft6a_65
	( 
	.in(wire_sft6a_in[65:65]),
	.out(wire_sft6a_out[65:65]));
	assign
		wire_sft6a_in = wire_add5_result;
	assign
		dataa_bus = {dataa[63:0]},
		datab_bus = {datab[63:0]},
		result = dffe7a[63:0],
		w305w = 1'b1,
		w_input306w = {wire_ded_mult1_result[63], wire_ded_mult1_result[63:0]},
		w_input311w = {w_neg_out298w[63], {(~ wire_ded_mult2_result[63:0])}},
		w_input317w = {wire_add3_result[64], wire_add3_result},
		w_input323w = {{65{1'b0}}, w305w},
		w_neg_out298w = {(~ wire_ded_mult2_result[63:0])};
endmodule //cmplx_mult_clk_mult_add


//altmult_add DEVICE_FAMILY="Cyclone II" INPUT_REGISTER_A0="UNREGISTERED" INPUT_REGISTER_A1="UNREGISTERED" INPUT_REGISTER_B0="UNREGISTERED" INPUT_REGISTER_B1="UNREGISTERED" MULTIPLIER1_DIRECTION="ADD" MULTIPLIER_REGISTER0="UNREGISTERED" MULTIPLIER_REGISTER1="UNREGISTERED" NUMBER_OF_MULTIPLIERS=2 OUTPUT_ACLR="ACLR0" OUTPUT_REGISTER="CLOCK0" port_addnsub1="PORT_UNUSED" port_signa="PORT_UNUSED" port_signb="PORT_UNUSED" REPRESENTATION_A="SIGNED" REPRESENTATION_B="SIGNED" WIDTH_A=32 WIDTH_B=32 WIDTH_RESULT=64 aclr0 clock0 dataa datab ena0 result
//VERSION_BEGIN 13.0 cbx_alt_ded_mult_y 2013:06:12:18:03:43:SJ cbx_altera_mult_add 2013:06:12:18:03:43:SJ cbx_altera_mult_add_rtl 2013:06:12:18:03:43:SJ cbx_altmult_add 2013:06:12:18:03:43:SJ cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_lpm_mult 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_padd 2013:06:12:18:03:43:SJ cbx_parallel_add 2013:06:12:18:03:43:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END


//adder DEVICE_FAMILY="Cyclone II" WIDTH=65 dataa datab result
//VERSION_BEGIN 13.0 cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END

//synthesis_resources = dsp_9bit 16 lut 277 reg 65 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  cmplx_mult_clk_mult_add1
	( 
	aclr0,
	clock0,
	dataa,
	datab,
	ena0,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr0;
	input   clock0;
	input   [63:0]  dataa;
	input   [63:0]  datab;
	input   ena0;
	output   [63:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr0;
	tri1   clock0;
	tri0   [63:0]  dataa;
	tri0   [63:0]  datab;
	tri1   ena0;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	[64:0]	wire_add18_result;
	wire  [63:0]   wire_ded_mult16_result;
	wire  [63:0]   wire_ded_mult17_result;
	(* ALTERA_ATTRIBUTE = {"MAX_FANOUT=5"} *)
	reg	[64:0]	dffe20a;
	wire  [64:0]   wire_sft19a_in;
	wire  [64:0]   wire_sft19a_out;
	wire  [63:0]  dataa_bus;
	wire  [63:0]  datab_bus;
	wire  [64:0]  w_input610w;
	wire  [64:0]  w_input616w;

	assign
		wire_add18_result = w_input610w + w_input616w;
	cmplx_mult_clk_ded_mult   ded_mult16
	( 
	.dataa({dataa_bus[31:0]}),
	.datab({datab_bus[31:0]}),
	.result(wire_ded_mult16_result));
	cmplx_mult_clk_ded_mult   ded_mult17
	( 
	.dataa({dataa_bus[63:32]}),
	.datab({datab_bus[63:32]}),
	.result(wire_ded_mult17_result));
	// synopsys translate_off
	initial
		dffe20a = 0;
	// synopsys translate_on
	always @ ( posedge clock0 or  posedge aclr0)
		if (aclr0 == 1'b1) dffe20a <= 65'b0;
		else if  (ena0 == 1'b1)   dffe20a <= wire_sft19a_out;
	soft   sft19a_0
	( 
	.in(wire_sft19a_in[0:0]),
	.out(wire_sft19a_out[0:0]));
	soft   sft19a_1
	( 
	.in(wire_sft19a_in[1:1]),
	.out(wire_sft19a_out[1:1]));
	soft   sft19a_2
	( 
	.in(wire_sft19a_in[2:2]),
	.out(wire_sft19a_out[2:2]));
	soft   sft19a_3
	( 
	.in(wire_sft19a_in[3:3]),
	.out(wire_sft19a_out[3:3]));
	soft   sft19a_4
	( 
	.in(wire_sft19a_in[4:4]),
	.out(wire_sft19a_out[4:4]));
	soft   sft19a_5
	( 
	.in(wire_sft19a_in[5:5]),
	.out(wire_sft19a_out[5:5]));
	soft   sft19a_6
	( 
	.in(wire_sft19a_in[6:6]),
	.out(wire_sft19a_out[6:6]));
	soft   sft19a_7
	( 
	.in(wire_sft19a_in[7:7]),
	.out(wire_sft19a_out[7:7]));
	soft   sft19a_8
	( 
	.in(wire_sft19a_in[8:8]),
	.out(wire_sft19a_out[8:8]));
	soft   sft19a_9
	( 
	.in(wire_sft19a_in[9:9]),
	.out(wire_sft19a_out[9:9]));
	soft   sft19a_10
	( 
	.in(wire_sft19a_in[10:10]),
	.out(wire_sft19a_out[10:10]));
	soft   sft19a_11
	( 
	.in(wire_sft19a_in[11:11]),
	.out(wire_sft19a_out[11:11]));
	soft   sft19a_12
	( 
	.in(wire_sft19a_in[12:12]),
	.out(wire_sft19a_out[12:12]));
	soft   sft19a_13
	( 
	.in(wire_sft19a_in[13:13]),
	.out(wire_sft19a_out[13:13]));
	soft   sft19a_14
	( 
	.in(wire_sft19a_in[14:14]),
	.out(wire_sft19a_out[14:14]));
	soft   sft19a_15
	( 
	.in(wire_sft19a_in[15:15]),
	.out(wire_sft19a_out[15:15]));
	soft   sft19a_16
	( 
	.in(wire_sft19a_in[16:16]),
	.out(wire_sft19a_out[16:16]));
	soft   sft19a_17
	( 
	.in(wire_sft19a_in[17:17]),
	.out(wire_sft19a_out[17:17]));
	soft   sft19a_18
	( 
	.in(wire_sft19a_in[18:18]),
	.out(wire_sft19a_out[18:18]));
	soft   sft19a_19
	( 
	.in(wire_sft19a_in[19:19]),
	.out(wire_sft19a_out[19:19]));
	soft   sft19a_20
	( 
	.in(wire_sft19a_in[20:20]),
	.out(wire_sft19a_out[20:20]));
	soft   sft19a_21
	( 
	.in(wire_sft19a_in[21:21]),
	.out(wire_sft19a_out[21:21]));
	soft   sft19a_22
	( 
	.in(wire_sft19a_in[22:22]),
	.out(wire_sft19a_out[22:22]));
	soft   sft19a_23
	( 
	.in(wire_sft19a_in[23:23]),
	.out(wire_sft19a_out[23:23]));
	soft   sft19a_24
	( 
	.in(wire_sft19a_in[24:24]),
	.out(wire_sft19a_out[24:24]));
	soft   sft19a_25
	( 
	.in(wire_sft19a_in[25:25]),
	.out(wire_sft19a_out[25:25]));
	soft   sft19a_26
	( 
	.in(wire_sft19a_in[26:26]),
	.out(wire_sft19a_out[26:26]));
	soft   sft19a_27
	( 
	.in(wire_sft19a_in[27:27]),
	.out(wire_sft19a_out[27:27]));
	soft   sft19a_28
	( 
	.in(wire_sft19a_in[28:28]),
	.out(wire_sft19a_out[28:28]));
	soft   sft19a_29
	( 
	.in(wire_sft19a_in[29:29]),
	.out(wire_sft19a_out[29:29]));
	soft   sft19a_30
	( 
	.in(wire_sft19a_in[30:30]),
	.out(wire_sft19a_out[30:30]));
	soft   sft19a_31
	( 
	.in(wire_sft19a_in[31:31]),
	.out(wire_sft19a_out[31:31]));
	soft   sft19a_32
	( 
	.in(wire_sft19a_in[32:32]),
	.out(wire_sft19a_out[32:32]));
	soft   sft19a_33
	( 
	.in(wire_sft19a_in[33:33]),
	.out(wire_sft19a_out[33:33]));
	soft   sft19a_34
	( 
	.in(wire_sft19a_in[34:34]),
	.out(wire_sft19a_out[34:34]));
	soft   sft19a_35
	( 
	.in(wire_sft19a_in[35:35]),
	.out(wire_sft19a_out[35:35]));
	soft   sft19a_36
	( 
	.in(wire_sft19a_in[36:36]),
	.out(wire_sft19a_out[36:36]));
	soft   sft19a_37
	( 
	.in(wire_sft19a_in[37:37]),
	.out(wire_sft19a_out[37:37]));
	soft   sft19a_38
	( 
	.in(wire_sft19a_in[38:38]),
	.out(wire_sft19a_out[38:38]));
	soft   sft19a_39
	( 
	.in(wire_sft19a_in[39:39]),
	.out(wire_sft19a_out[39:39]));
	soft   sft19a_40
	( 
	.in(wire_sft19a_in[40:40]),
	.out(wire_sft19a_out[40:40]));
	soft   sft19a_41
	( 
	.in(wire_sft19a_in[41:41]),
	.out(wire_sft19a_out[41:41]));
	soft   sft19a_42
	( 
	.in(wire_sft19a_in[42:42]),
	.out(wire_sft19a_out[42:42]));
	soft   sft19a_43
	( 
	.in(wire_sft19a_in[43:43]),
	.out(wire_sft19a_out[43:43]));
	soft   sft19a_44
	( 
	.in(wire_sft19a_in[44:44]),
	.out(wire_sft19a_out[44:44]));
	soft   sft19a_45
	( 
	.in(wire_sft19a_in[45:45]),
	.out(wire_sft19a_out[45:45]));
	soft   sft19a_46
	( 
	.in(wire_sft19a_in[46:46]),
	.out(wire_sft19a_out[46:46]));
	soft   sft19a_47
	( 
	.in(wire_sft19a_in[47:47]),
	.out(wire_sft19a_out[47:47]));
	soft   sft19a_48
	( 
	.in(wire_sft19a_in[48:48]),
	.out(wire_sft19a_out[48:48]));
	soft   sft19a_49
	( 
	.in(wire_sft19a_in[49:49]),
	.out(wire_sft19a_out[49:49]));
	soft   sft19a_50
	( 
	.in(wire_sft19a_in[50:50]),
	.out(wire_sft19a_out[50:50]));
	soft   sft19a_51
	( 
	.in(wire_sft19a_in[51:51]),
	.out(wire_sft19a_out[51:51]));
	soft   sft19a_52
	( 
	.in(wire_sft19a_in[52:52]),
	.out(wire_sft19a_out[52:52]));
	soft   sft19a_53
	( 
	.in(wire_sft19a_in[53:53]),
	.out(wire_sft19a_out[53:53]));
	soft   sft19a_54
	( 
	.in(wire_sft19a_in[54:54]),
	.out(wire_sft19a_out[54:54]));
	soft   sft19a_55
	( 
	.in(wire_sft19a_in[55:55]),
	.out(wire_sft19a_out[55:55]));
	soft   sft19a_56
	( 
	.in(wire_sft19a_in[56:56]),
	.out(wire_sft19a_out[56:56]));
	soft   sft19a_57
	( 
	.in(wire_sft19a_in[57:57]),
	.out(wire_sft19a_out[57:57]));
	soft   sft19a_58
	( 
	.in(wire_sft19a_in[58:58]),
	.out(wire_sft19a_out[58:58]));
	soft   sft19a_59
	( 
	.in(wire_sft19a_in[59:59]),
	.out(wire_sft19a_out[59:59]));
	soft   sft19a_60
	( 
	.in(wire_sft19a_in[60:60]),
	.out(wire_sft19a_out[60:60]));
	soft   sft19a_61
	( 
	.in(wire_sft19a_in[61:61]),
	.out(wire_sft19a_out[61:61]));
	soft   sft19a_62
	( 
	.in(wire_sft19a_in[62:62]),
	.out(wire_sft19a_out[62:62]));
	soft   sft19a_63
	( 
	.in(wire_sft19a_in[63:63]),
	.out(wire_sft19a_out[63:63]));
	soft   sft19a_64
	( 
	.in(wire_sft19a_in[64:64]),
	.out(wire_sft19a_out[64:64]));
	assign
		wire_sft19a_in = wire_add18_result;
	assign
		dataa_bus = {dataa[63:0]},
		datab_bus = {datab[63:0]},
		result = dffe20a[63:0],
		w_input610w = {wire_ded_mult16_result[63], wire_ded_mult16_result[63:0]},
		w_input616w = {wire_ded_mult17_result[63], wire_ded_mult17_result[63:0]};
endmodule //cmplx_mult_clk_mult_add1

//synthesis_resources = dsp_9bit 32 lut 620 reg 131 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  cmplx_mult_clk_altmult_complex
	( 
	clock,
	dataa_imag,
	dataa_real,
	datab_imag,
	datab_real,
	result_imag,
	result_real) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [31:0]  dataa_imag;
	input   [31:0]  dataa_real;
	input   [31:0]  datab_imag;
	input   [31:0]  datab_real;
	output   [63:0]  result_imag;
	output   [63:0]  result_real;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [63:0]   wire_mult_add1_result;
	wire  [63:0]   wire_mult_add2_result;
	wire aclr;
	wire ena;
	wire  [63:0]  mult_add1_inputa;
	wire  [63:0]  mult_add1_inputb;
	wire  [63:0]  mult_add2_inputb;

	cmplx_mult_clk_mult_add   mult_add1
	( 
	.aclr0(aclr),
	.clock0(clock),
	.dataa(mult_add1_inputa),
	.datab(mult_add1_inputb),
	.ena0(ena),
	.result(wire_mult_add1_result));
	cmplx_mult_clk_mult_add1   mult_add2
	( 
	.aclr0(aclr),
	.clock0(clock),
	.dataa(mult_add1_inputa),
	.datab(mult_add2_inputb),
	.ena0(ena),
	.result(wire_mult_add2_result));
	assign
		aclr = 1'b0,
		ena = 1'b1,
		mult_add1_inputa = {dataa_imag[31:0], dataa_real[31:0]},
		mult_add1_inputb = {datab_imag[31:0], datab_real[31:0]},
		mult_add2_inputb = {datab_real[31:0], datab_imag[31:0]},
		result_imag = wire_mult_add2_result,
		result_real = wire_mult_add1_result;
endmodule //cmplx_mult_clk_altmult_complex
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module cmplx_mult_clk (
	clock,
	dataa_imag,
	dataa_real,
	datab_imag,
	datab_real,
	result_imag,
	result_real)/* synthesis synthesis_clearbox = 1 */;

	input	  clock;
	input	[31:0]  dataa_imag;
	input	[31:0]  dataa_real;
	input	[31:0]  datab_imag;
	input	[31:0]  datab_real;
	output	[63:0]  result_imag;
	output	[63:0]  result_real;

	wire [63:0] sub_wire0;
	wire [63:0] sub_wire1;
	wire [63:0] result_imag = sub_wire0[63:0];
	wire [63:0] result_real = sub_wire1[63:0];

	cmplx_mult_clk_altmult_complex	cmplx_mult_clk_altmult_complex_component (
				.clock (clock),
				.dataa_imag (dataa_imag),
				.dataa_real (dataa_real),
				.datab_imag (datab_imag),
				.datab_real (datab_real),
				.result_imag (sub_wire0),
				.result_real (sub_wire1));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone II"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: CONSTANT: IMPLEMENTATION_STYLE STRING "AUTO"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Cyclone II"
// Retrieval info: CONSTANT: PIPELINE NUMERIC "1"
// Retrieval info: CONSTANT: REPRESENTATION_A STRING "SIGNED"
// Retrieval info: CONSTANT: REPRESENTATION_B STRING "SIGNED"
// Retrieval info: CONSTANT: WIDTH_A NUMERIC "32"
// Retrieval info: CONSTANT: WIDTH_B NUMERIC "32"
// Retrieval info: CONSTANT: WIDTH_RESULT NUMERIC "64"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: dataa_imag 0 0 32 0 INPUT NODEFVAL "dataa_imag[31..0]"
// Retrieval info: USED_PORT: dataa_real 0 0 32 0 INPUT NODEFVAL "dataa_real[31..0]"
// Retrieval info: USED_PORT: datab_imag 0 0 32 0 INPUT NODEFVAL "datab_imag[31..0]"
// Retrieval info: USED_PORT: datab_real 0 0 32 0 INPUT NODEFVAL "datab_real[31..0]"
// Retrieval info: USED_PORT: result_imag 0 0 64 0 OUTPUT NODEFVAL "result_imag[63..0]"
// Retrieval info: USED_PORT: result_real 0 0 64 0 OUTPUT NODEFVAL "result_real[63..0]"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @dataa_imag 0 0 32 0 dataa_imag 0 0 32 0
// Retrieval info: CONNECT: @dataa_real 0 0 32 0 dataa_real 0 0 32 0
// Retrieval info: CONNECT: @datab_imag 0 0 32 0 datab_imag 0 0 32 0
// Retrieval info: CONNECT: @datab_real 0 0 32 0 datab_real 0 0 32 0
// Retrieval info: CONNECT: result_imag 0 0 64 0 @result_imag 0 0 64 0
// Retrieval info: CONNECT: result_real 0 0 64 0 @result_real 0 0 64 0
// Retrieval info: GEN_FILE: TYPE_NORMAL cmplx_mult_clk.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL cmplx_mult_clk.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL cmplx_mult_clk.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL cmplx_mult_clk.bsf TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL cmplx_mult_clk_inst.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL cmplx_mult_clk_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL cmplx_mult_clk_syn.v TRUE
// Retrieval info: LIB_FILE: altera_mf
