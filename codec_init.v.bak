module codec_init (
    clk_i,
    rst_n_i,
    i2c_sclk_o,
    i2c_sdat_io
);

// Params
localparam CLK_Freq = 50 * 1000 * 1000;	//ex. 50MHz
localparam I2C_Freq = 300 * 1000;			//ex. 300kHz

// Lut index
localparam Dummy_DATA	=	0;
localparam SET_LIN_L	=	1;
localparam SET_LIN_R	=	2;
localparam SET_HEAD_L	=	3;
localparam SET_HEAD_R	=	4;
localparam A_PATH_CTRL	=	5;
localparam D_PATH_CTRL	=	6;
localparam POWER_ON	    =	7;
localparam SET_FORMAT	=	8;
localparam SAMPLE_CTRL	=	9;
localparam SET_ACTIVE	=	10;
localparam CMD_NUM	    =	11;
localparam VOL = 7'd120;

// Ports definition
input  clk_i;
input  rst_n_i;
output i2c_sclk_o;
inout  i2c_sdat_io;

// Internal regs
reg	[15:0]	mI2C_CLK_DIV;
reg	[15:0]	mI2C_DATA;
reg			mI2C_CTRL_CLK;
reg			mI2C_GO;
reg	[15:0]	DATAWORD;
reg	[3:0]	CMD;
reg	[1:0]	mSetup_ST;

// Internal wires
wire mI2C_END;
wire mI2C_ACK;

i2c mI2C ( 	
    .CLK(mI2C_CTRL_CLK),
    .RST_L(rst_n_i),
        
    .GO(mI2C_GO),
    .READY(mI2C_END),
    .ACK(mI2C_ACK),	
    .I2C_DATA(mI2C_DATA),
    
    .I2C_SCLK(i2c_sclk_o),
    .I2C_SDAT(i2c_sdat_io)
);

// I2C Control Clock
always@(posedge clk_i)
begin
    if(!rst_n_i)
    begin
        mI2C_CTRL_CLK	<=	0;
        mI2C_CLK_DIV	<=	0;
    end
    else
    begin
        if( mI2C_CLK_DIV < 8 )	//(CLK_Freq/I2C_Freq)
            mI2C_CLK_DIV <= mI2C_CLK_DIV+16'd1;
        else begin
            mI2C_CLK_DIV  <= 0;
            mI2C_CTRL_CLK <= ~mI2C_CTRL_CLK;
        end
    end
end

always@(posedge mI2C_CTRL_CLK or negedge rst_n_i) begin
    if(!rst_n_i) begin
        CMD	<=	0;
        mSetup_ST	<=	0;
        mI2C_GO		<=	0;
    end else begin
        if(CMD<CMD_NUM)
            case(mSetup_ST)
                0:	begin
                    mI2C_DATA	<=	DATAWORD;
                    mI2C_GO		<=	1;
                    mSetup_ST	<=	1;
                end
                1:	begin
                    if(mI2C_END) begin
                        if(!mI2C_ACK)
                            mSetup_ST	<=	2;
                        else
                            mSetup_ST	<=	0;							
                        mI2C_GO		<=	0;
                    end
                end
                2:	begin
                    CMD	<=	CMD+4'd1;
                    mSetup_ST	<=	0;
                end
            endcase
    end
end

always begin
	case(CMD)
        Dummy_DATA	:	DATAWORD	<=	16'h0000;
        SET_LIN_L	:	DATAWORD	<=	16'h0000;
        SET_LIN_R	:	DATAWORD	<=	16'h0200;
        SET_HEAD_L	:	DATAWORD	<=	{8'h04,1'b1,VOL};
        SET_HEAD_R	:	DATAWORD	<=	{8'h06,1'b1,VOL};
        A_PATH_CTRL	:	DATAWORD	<=	16'h0812;
        D_PATH_CTRL	:	DATAWORD	<=	16'h0A04;
        POWER_ON	:	DATAWORD	<=	16'h0C00;
        SET_FORMAT	:	DATAWORD	<=	16'h0E02;
        SAMPLE_CTRL	:	DATAWORD	<=	16'h1022;
        SET_ACTIVE	:	DATAWORD	<=	16'h1201;
        default		:	DATAWORD	<=	16'h0000;
	endcase
end

endmodule
