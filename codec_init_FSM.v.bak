// ============================================================================
//
// Permission:
//
// ============================================================================
//
// Major Functions:I2C Finite State Machine
//
// ============================================================================
//
// Revision History :
// 
// ============================================================================

// ============================================================================

// si occupa di inizializzare il codec programmandone tutti i registri interni.
// Dopo potrebbe essere usata per cambiare volume se servisse

module codec_init_FSM (
    clk,
    rst_n,
	 ack,
    //change_volume, ??
    cmd,
	 send
);

/* Possible commands */
localparam Dummy_DATA	=	0;
localparam SET_LIN_L	=	1;
localparam SET_LIN_R	=	2;
localparam SET_HEAD_L	=	3;
localparam SET_HEAD_R	=	4;
localparam A_PATH_CTRL	=	5;
localparam D_PATH_CTRL	=	6;
localparam POWER_ON	    =	7;
localparam SET_FORMAT	=	8;
localparam SAMPLE_CTRL	=	9;
localparam SET_ACTIVE	=	10;
localparam INIT_CMDS_N	= 11;
//localparam VOL = 7'd120;

/* Ports definition */
input  clk;
input  rst_n;
output cmd;
output send;
//input  change_volume;

/* Internal regs */
//reg	[15:0]	mI2C_CLK_DIV;
//reg	[23:0]	mI2C_DATA;
//reg			mI2C_CTRL_CLK;
//reg			mI2C_GO;
//reg	[15:0]	LUT_DATA;
//reg	[3:0]	LUT_INDEX;
reg	[1:0]	state_cnt;
reg	cmd_idx;

/* Internal wires */
wire mI2C_END;
wire mI2C_ACK;

assign cmd = cmd_idx;

always@(posedge clk) begin	//reset sincrono
    if(!rst_n) begin
        cmd	<=	0;
        state_cnt	<=	0;
		  cmd_idx	<= 0;
        send		<=	0;
    end else begin
        if(cmd_idx < INIT_CMDS_N)
            case(state_cnt)
                0:	begin
                    cmd_idx	<=	{8'h34,LUT_DATA};
                    send		<=	1;
                    state_cnt	<=	1;
                end
                1:	begin
                    if(mI2C_END) begin
                        if(!mI2C_ACK)
                            mSetup_ST	<=	2;
                        else
                            mSetup_ST	<=	0;							
                        mI2C_GO		<=	0;
                    end
                end
                2:	begin
                    state_cnt	<=	LUT_INDEX+4'd1;
                    mSetup_ST	<=	0;
                end
            endcase
    end
end

always begin
	case(LUT_INDEX)
        Dummy_DATA	:	LUT_DATA	<=	16'h0000;
        SET_LIN_L	:	LUT_DATA	<=	16'h0000;
        SET_LIN_R	:	LUT_DATA	<=	16'h0200;
        SET_HEAD_L	:	LUT_DATA	<=	{8'h04,1'b1,VOL};
        SET_HEAD_R	:	LUT_DATA	<=	{8'h06,1'b1,VOL};
        A_PATH_CTRL	:	LUT_DATA	<=	16'h0812;
        D_PATH_CTRL	:	LUT_DATA	<=	16'h0A04;
        POWER_ON	:	LUT_DATA	<=	16'h0C00;
        SET_FORMAT	:	LUT_DATA	<=	16'h0E02;
        SAMPLE_CTRL	:	LUT_DATA	<=	16'h1022;
        SET_ACTIVE	:	LUT_DATA	<=	16'h1201;
        default		:	LUT_DATA	<=	16'h0000;
	endcase
end

endmodule

module codec_programmer(
    RST_L,
    CLK,
    CMD,
    GO,
    SDAT,//i2c data line
    SCLK,//i2c clock out.
    READY,//Goes high when the module is done doing its thing
    ACK,
//ONLY TO USE IN TESTBENCH
    DIV_CLK
//output [3:0]audioInitError,

//input manualSend,//Pulse high to send i2c data manually.
//input [6:0]manualRegister,
//input [8:0]manualData,
//output reg manualDone
);

    input RST_L;
    input CLK;
    input CMD;
    input GO;
    inout SDAT;
    output SCLK;
    output READY;
    output ACK;
    output DIV_CLK;

//possible commands from main FSM (to initialize codec, ...)
localparam Dummy_DATA	=	0;
localparam SET_LIN_L	=	1;
localparam SET_LIN_R	=	2;
localparam SET_HEAD_L	=	3;
localparam SET_HEAD_R	=	4;
localparam A_PATH_CTRL	=	5;
localparam D_PATH_CTRL	=	6;
localparam POWER_ON	    =	7;
localparam SET_FORMAT	=	8;
localparam SAMPLE_CTRL	=	9;

always begin
	case(LUT_INDEX)
        Dummy_DATA	:	LUT_DATA	<=	16'h0000;
        SET_LIN_L	:	LUT_DATA	<=	16'h0000;
        SET_LIN_R	:	LUT_DATA	<=	16'h0200;
        SET_HEAD_L	:	LUT_DATA	<=	{8'h04,1'b1,VOL};
        SET_HEAD_R	:	LUT_DATA	<=	{8'h06,1'b1,VOL};
        A_PATH_CTRL	:	LUT_DATA	<=	16'h0812;
        D_PATH_CTRL	:	LUT_DATA	<=	16'h0A04;
        POWER_ON	:	LUT_DATA	<=	16'h0C00;
        SET_FORMAT	:	LUT_DATA	<=	16'h0E02;
        SAMPLE_CTRL	:	LUT_DATA	<=	16'h1022;
        SET_ACTIVE	:	LUT_DATA	<=	16'h1201;
        default		:	LUT_DATA	<=	16'h0000;
	endcase
end
// frequency division factor
localparam F_DIV = 8;


//reg [6:0]REGISTERS[0:5];
//reg [8:0]DATA[0:5];

//reg [3:0]currentInit;
//reg [2:0]initState;


//i2c interface
//reg i2cEnable;
//initial i2cEnable = 1'b0;

//reg [6:0]i2cRegister;
//reg [8:0]i2cData;
//wire [3:0]i2cError;
//wire i2cDone;

reg SLOW_CLK;
reg DATAWORD;
reg COUNT;

initial COUNT = 0;

// frequency division for I2C clock
always @(posedge CLK) begin
    COUNT <= COUNT + 1;
    if (COUNT >= F_DIV) begin
        COUNT <= 0;
        SLOW_CLK <= ~SLOW_CLK;
    end
end
always begin
    case(CMD)
        Dummy_DATA	:	LUT_DATA	<=	16'h0000;
        SET_LIN_L		:	LUT_DATA	<=	{7'd0,9'b000010111};
        SET_LIN_R		:	LUT_DATA	<=	{7'd1,9'b000010111};
        SET_HEAD_L	:	LUT_DATA	<=	{7'd2,9'b000000000}; //valutare di mettere l'audio in uscita
        SET_HEAD_R	:	LUT_DATA	<=	{7'd3,9'b000000000};
        A_PATH_CTRL	:	LUT_DATA	<=	{7'd4,9'b000000010};
        D_PATH_CTRL	:	LUT_DATA	<=	{7'd5,9'b000001000};
        POWER_ON		:	LUT_DATA	<=	{7'd6,9'b001101010};
        SET_FORMAT	:	LUT_DATA	<=	{7'd7,9'b000000010};
        SAMPLE_CTRL	:	LUT_DATA	<=	{7'd8,9'b};
        SET_ACTIVE	:	LUT_DATA	<=	{7'd18,9'b000000001};
        default		:	LUT_DATA	<=	16'h0000;  
    endcase
end
i2c i2c_fsm(
	.RST_L(i2cEnable),
	.CLK(SLOW_CLK),
	.ACK(ACK),//Same address every time: the sound chip.
	.GO(GO),
	.I2C_DATA(DATAWORD),
	//.rw(1'b0),//We're always writing. Can't read from this device.
	//.error(i2cError),//This will output an error if something goes wrong.
	.I2C_SDAT(SDAT),//This is the i2c data line.
	.I2C_SCLK(SCLK),
	.READY(READY),//Will go high when i2c is done.
	.SDO(),
	.SD_COUNTER()
);

assign DIV_CLK = SLOW_CLK;

endmodule