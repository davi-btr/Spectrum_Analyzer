// ============================================================================
//
// Permission:
//
// ============================================================================
//
// Major Functions:I2C Finite State Machine
//
// ============================================================================
//
// Revision History :
// 
// ============================================================================

// ============================================================================

// si occupa di trasformare i "comandi" dalla fsm principale in registro del codec e parola da scrivere
// fa da frequency divider per il clock (i2c pi√π lento del resto)

module codec_programmer(
    RST_L,
    CLK,
    CMD,
    GO,
    SDAT,//i2c data line
    SCLK,//i2c clock out.
    READY,//Goes high when the module is done doing its thing
    ACK,
//ONLY TO USE IN TESTBENCH
    DIV_CLK
//output [3:0]audioInitError,

//input manualSend,//Pulse high to send i2c data manually.
//input [6:0]manualRegister,
//input [8:0]manualData,
//output reg manualDone
);

    input RST_L;
    input CLK;
    input CMD;
    input GO;
    inout SDAT;
    output SCLK;
    output READY;
    output ACK;
    output DIV_CLK;

//possible commands from main FSM (to initialize codec, ...)
parameter  = ;
parameter  = ;
parameter  = ;
parameter  = ;
parameter  = ;
parameter  = ;
parameter  = ;
parameter  = ;
// frequency division factor
parameter F_DIV = 8;


//reg [6:0]REGISTERS[0:5];
//reg [8:0]DATA[0:5];

//reg [3:0]currentInit;
//reg [2:0]initState;


//i2c interface
//reg i2cEnable;
//initial i2cEnable = 1'b0;

//reg [6:0]i2cRegister;
//reg [8:0]i2cData;
//wire [3:0]i2cError;
//wire i2cDone;

reg SLOW_CLK;
reg DATAWORD;
reg COUNT;

initial COUNT = 0;

// frequency division for I2C clock
always @(posedge CLK) begin
    COUNT <= COUNT + 1;
    if (COUNT >= F_DIV) begin
        COUNT <= 0;
        SLOW_CLK <= ~SLOW_CLK;
    end
end
always @() begin
    case(CMD)
        //commands from parameters  
    endcase
end
i2c i2c_fsm(
.RST_L(i2cEnable),
.CLK(SLOW_CLK),
.ACK(ACK),//Same address every time: the sound chip.
.GO(GO),
.I2C_DATA(DATAWORD),
//.rw(1'b0),//We're always writing. Can't read from this device.
//.error(i2cError),//This will output an error if something goes wrong.
.I2C_SDAT(SDAT),//This is the i2c data line.
.I2C_SCLK(SCLK),
.READY(READY),//Will go high when i2c is done.
.SDO(),
.SD_COUNTER()
);

assign DIV_CLK = SLOW_CLK;

endmodule